#!/bin/bash

NEET=`grep "^neetbase=" /opt/neet/etc/locations | awk -F= {print'$2'}`

command=$1
option=$2

function usage {
	echo "Usage: neet-maint <command> [OPTIONS]"
	echo
	echo " \"update\" - Updates nikto, metasploit and other internal components"
	echo " \"pwimport\" <FILE> - Specify a custom password list which you wish to"
	echo "              import. Words in this list will be appended to any"
	echo "              existing lists that you may have previously imported."
	echo " \"pwflush\" <user|given|guessed> - Empty the specified password list"
	echo " \"pwshow\" <user|given|guessed> - show the specified password list"
	echo " \"defconf\" [restore] - Delete the current configuration file and"
	echo "                 install the default configuration that shipped with"
	echo "                 this version of neet. Specify \"restore\" if you regret"
	echo "                 this decision and want your old config back."
	exit 1
}

function update {
	local owd=$PWD
	echo "Updating Nikto"
	cd "${NEET}/external/nikto"
	./nikto.pl -update
	echo "Updating Metasploit"
	cd "${NEET}/external/framework"
	svn update
	cd "$owd"
	echo "Done"		
}

function pwimport {
	if [ ! -f "$option" ]; then
		echo "Couldn't find specified file!"
		exit 1
	fi
	echo "Adding $option to password list"
	local dir="${NEET}/resources/user/"
	local userpw="${dir}/passwords.txt"
	local olduserpw="${dir}/oldpasswords.txt"
	local newuserpw="${dir}/newpasswords.txt"

	if [ -f "$userpw" ]; then
		mv "$userpw" "$olduserpw"
		cp "$option" "$newuserpw"
		cat "$olduserpw" "$newuserpw" | sort -u > "$userpw"
		rm "$newuserpw" "$olduserpw"
	fi
	
}

function pwflush {
	local dir="${NEET}/resources"

	if [ "$option" == "user" ]; then
		rm "${dir}/user/passwords.txt"
	elif [ "$option" == "given" ]; then
		rm "${dir}/user/given.txt"
	elif [ "$option" == "guessed" ]; then
		rm "${dir}/dynamic/guessed.txt"
	else
		echo "Couldn't figure out which list to flush"
		exit 1
	fi
	echo "Flushed $option password list"
	exit 0

}
function pwshow {
	local dir="${NEET}/resources"

	if [ "$option" == "user" ]; then
		echo "${dir}/user/passwords.txt"
		more "${dir}/user/passwords.txt"
	elif [ "$option" == "given" ]; then
		echo "${dir}/user/given.txt"
		cat "${dir}/user/given.txt"
	elif [ "$option" == "guessed" ]; then
		echo "${dir}/dynamic/guessed.txt"
		cat "${dir}/dynamic/guessed.txt"
	else
		echo "Couldn't figure out which list to show!"
		exit 1
	fi
	exit 0

}

function defconf {
	cd /opt/neet/etc
	if [ "$option" == "restore" ]; then
		if [ -f neet.conf.removed ]; then
			mv neet.conf.removed neet.conf
			echo "Restored your previous config."
		else
			echo "Couldn't find previous configuration file."
			exit 1
		fi
	else
		if [ -f neet.conf.installed ]; then
			if [ ! -f neet.conf.removed ]; then
				mv neet.conf neet.conf.removed
				cp neet.conf.installed neet.conf
				echo "Restored original config."
			else
				echo "A backup copy of a previously overwritten config already exists."
				echo "Do you want to make a backup which overwrites that one [y/n/X]?"
				echo "(Selecting no will just overwrite the current config without making"
				echo "a backup. Selecting \"x\" will exit without making any changes.)"
				echo "[y/n/X]?"
				read -sn1 user
				if [ "$user" == "y" ]; then
					mv neet.conf neet.conf.removed
					cp neet.conf.installed neet.conf
					echo "Restored original config."
					exit 0
				fi
				if [ "$user" == "n" ]; then
					cp neet.conf.installed neet.conf
					echo "Restored original config."
					exit 0
				else
					echo "Chicken."
				fi
			fi
		else
			echo "Couldn't find original configuration file."
			exit 1
		fi
	fi
}

case $command in 
												"update")
												update			
												;;
												"pwimport")
												pwimport
												;;
												"pwflush")
												pwflush
												;;
												"pwshow")
												pwshow
												;;
												"defconf")
												defconf
												;;

												*)
												usage

esac










